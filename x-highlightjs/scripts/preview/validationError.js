/* See license.txt for terms of usage */

define(["../domplate/domplate","../core/lib","../core/trace","../domplate/popupMenu"],function(e,r,t,s){var n=e.domplate,o=e.DIV,i=e.FOR,a=e.SPAN,p=e.TABLE,l=e.TBODY,c=e.TD;return n({errorTable:p({class:"errorTable",cellpadding:3,cellspacing:0},l(i("error","$errors",(0,e.TR)({class:"errorRow",_repObject:"$error"},c({class:"errorProperty"},a("$error.property")),c({class:"errorOptions",$hasTarget:"$error|hasTarget"},o({class:"errorOptionsTarget",onclick:"$onOpenOptions"},"&nbsp;")),c("&nbsp;"),c({class:"errorMessage"},a("$error.message")))))),hasTarget:function(e){return e.input&&e.file},onOpenOptions:function(e){var t=r.fixEvent(e);if(r.cancelEvent(e),r.isLeftClick(e)){var n=t.target,o=r.getAncestorByClass(n,"errorRow"),i=o.repObject;if(i&&i.input&&i.file){var a=this.getMenuItems(i.input,i.file);a.length&&new s({id:"requestContextMenu",items:a}).showPopup(n)}}},getMenuItems:function(e,t){var s=[];return r.dispatch(this.listeners,"getMenuItems",[s,e,t]),s},listeners:[],addListener:function(e){this.listeners.push(e)},removeListener:function(e){r.remove(this.listeners,e)},appendError:function(e,r){e.errors&&this.errorTable.append(e,r)}})});